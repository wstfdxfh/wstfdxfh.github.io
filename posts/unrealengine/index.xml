<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>UnrealEngine on 李睿杰的博客</title>
    <link>https://wstfdxfh.github.io/posts/unrealengine/</link>
    <description>Recent content in UnrealEngine on 李睿杰的博客</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 25 Mar 2025 22:20:27 +0800</lastBuildDate>
    <atom:link href="https://wstfdxfh.github.io/posts/unrealengine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Converting Blueprint to C&#43;&#43;</title>
      <link>https://wstfdxfh.github.io/posts/unrealengine/converting-blueprint-to-c&#43;&#43;/</link>
      <pubDate>Tue, 25 Mar 2025 22:20:27 +0800</pubDate>
      <guid>https://wstfdxfh.github.io/posts/unrealengine/converting-blueprint-to-c&#43;&#43;/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;ue4-将蓝图转换为c&#34;&gt;UE4: 将蓝图转换为C++&lt;/h1&gt;
&lt;p&gt;教程&lt;a href=&#34;https://dev.epicgames.com/community/learning/courses/KJ/unreal-engine-converting-blueprint-to-c/kjB/unreal-engine-introduction-to-blueprint-vs-c&#34;&gt;https://dev.epicgames.com/community/learning/courses/KJ/unreal-engine-converting-blueprint-to-c/kjB/unreal-engine-introduction-to-blueprint-vs-c&lt;/a&gt;的笔记&lt;/p&gt;
&lt;h2 id=&#34;创建c基类&#34;&gt;创建C++基类&lt;/h2&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用蓝图继承C++，反之不行&lt;/li&gt;
&lt;li&gt;C++可以在运行时调用蓝图的function，称之为Runtime Calls，调用的时候C++调用一个C++的声明函数，并且由蓝图函数实现&lt;/li&gt;
&lt;li&gt;如果要使用蓝图继承C++类，必须在C++类头文件的的UCLASS宏中设置Blueprintable，注意这个关键词(Keyword)是可继承的，比如AActor中已经进行了标注了关键词(Keyword)的话，继承它的类就不需要再进行标注&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UCLASS( ClassGroup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(Custom), meta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(BlueprintSpawnableComponent), Blueprintable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BLUEPRINTSTOCPP_API&lt;/span&gt; UGrabber : &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; USceneComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;需要对Visual Studio中的配置管理器设置为&amp;quot;Development Editor&amp;quot;, 方案平台设置为&amp;quot;Win64&amp;quot;，随后进行生成&lt;/li&gt;
&lt;li&gt;进行生成后，点击VS的“开始执行（不调试）”，即可重启UE&lt;/li&gt;
&lt;li&gt;如果发生错误，可以尝试删除项目中的&amp;quot;Binaries&amp;quot;文件夹以及&amp;quot;Intermediate&amp;quot;文件夹后右键.uproject生成VS项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生命周期方法&#34;&gt;生命周期方法&lt;/h2&gt;
&lt;p&gt;对于AActor类和SceneComponent类来说，它们都有各自的构造函数、Beginplay函数以及Tick（或者是TickComponent）函数，可以使用UE_LOG进行日志打印，打印的结果会出现在UE的Output Log窗口中。&lt;/p&gt;
&lt;p&gt;打印的格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UE_LOG(LogTemp, Warning, TEXT(&amp;#34;Grabber Constructed&amp;#34;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在以上函数中都加入类似的日志打印以后生成，会发现构造函数在打开编辑器以及开始游戏时各调用一次；Beginplay在开始游戏时（在构造函数后）调用一次；Tick会在之后每帧调用，通过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PrimaryComponentTick.bCanEverTick = false;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以禁用Tick函数的调用，节约CPU，但是这个设置会被继承的蓝图覆盖。&lt;/p&gt;
&lt;h2 id=&#34;actor-与-components-比较&#34;&gt;Actor 与 Components 比较&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;Actors&lt;/th&gt;
          &lt;th&gt;Components&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Can be placed in levels&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
          &lt;td&gt;✘&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Can have components&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
          &lt;td&gt;✘&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Modularity&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Inheritance&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Default variable values&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Maintainability&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Composable&lt;/td&gt;
          &lt;td&gt;_&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们一般倾向于将Components接在Actor上，而Actor本身不去实现太多功能。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
